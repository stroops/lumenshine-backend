basePath: /portal/pay
definitions:
  CreateOrderResponse:
    description: CreateOrderResponse is the return data , for creating a new order
    properties:
      exchange_asset_code:
        description: AssetCode in the payment Network
        type: string
        x-go-name: ExchangeAssetCode
      exchange_currency_type:
        description: 'Type for payment: stellar, other_crypto, fiat'
        type: string
        x-go-name: ExchangeCurrencyType
      exchange_value_to_pay:
        description: Value to pay in the selected payment Network asset code
        type: string
        x-go-name: ExchangeValueToPay
      fiat_bank_name:
        type: string
        x-go-name: FiatBankName
      fiat_bic:
        type: string
        x-go-name: FiatBIC
      fiat_destination_name:
        type: string
        x-go-name: FiatDestinationName
      fiat_iban:
        type: string
        x-go-name: FiatIBAN
      order_id:
        format: int64
        type: integer
        x-go-name: OrderID
      order_status:
        type: string
        x-go-name: OrderStatus
      ordered_token_amount:
        format: int64
        type: integer
        x-go-name: OrderedTokenAmount
      ordered_token_asset_code:
        type: string
        x-go-name: OrderedTokenAssetCode
      payment_address:
        description: PaymentAddress is the address in the PaymentNetwork, where the
          user must transfer the Exchange-Asset
        type: string
        x-go-name: PaymentAddress
      payment_network:
        type: string
        x-go-name: PaymentNetwork
      payment_usage:
        description: This is used for fiat and stellar payments. for stellar, this
          needs to be send via MEMO
        type: string
        x-go-name: PaymentUsage
      qr_code:
        description: |-
          QRCode is a bitmap for the transaction in the Payment-Network
          TODO
        items:
          format: uint8
          type: integer
        type: array
        x-go-name: QRCode
      stellar_user_public_key:
        description: StellarUserPublicKey is the stellar public key of the user for
          this order. If omited on CreateOrder, the service will grab the first 'free'
          one from the user wallets, when the payment arrives, in order to connect
          only once to horizen. So this might be empty
        type: string
        x-go-name: StellarUserPublicKey
    type: object
    x-go-package: github.com/Soneso/lumenshine-backend/api/payapi
  ExchangeCurrency:
    description: ExchangeCurrency represents one exchange currency used everywhere
    properties:
      asset_code:
        type: string
        x-go-name: AssetCode
      decimals:
        description: Number of decimal places for the denominator
        format: int64
        type: integer
        x-go-name: Decimals
      ec_asset_issuer_pk:
        description: this is the issuer public key for an stellar asset for the exchange
          currency. only set for stellar
        type: string
        x-go-name: EcAssetIssuerPK
      exchange_currency_type:
        type: string
        x-go-name: ExchangeCurrencyType
      id:
        format: int64
        type: integer
        x-go-name: ID
      price_per_token:
        description: Includes the UoM of the asset (EUR/XLM,BTC...)
        type: string
        x-go-name: PricePerToken
    type: object
    x-go-package: github.com/Soneso/lumenshine-backend/api/payapi
  ExecuteTransactionResponse:
    description: ExecuteTransactionResponse response object
    properties:
      transaction_hash:
        type: string
        x-go-name: TransactionHash
    type: object
    x-go-package: github.com/Soneso/lumenshine-backend/api/payapi
  FakeTransactionResponse:
    description: FakeTransactionResponse response object
    properties:
      is_duplicate:
        type: boolean
        x-go-name: IsDuplicate
    type: object
    x-go-package: github.com/Soneso/lumenshine-backend/api/payapi
  IcoPhaseDetailsResponse:
    description: IcoPhaseDetailsResponse lists details of the specified IPC-Phase
    properties:
      active_exchange_currencies:
        items:
          $ref: '#/definitions/ExchangeCurrency'
        type: array
        x-go-name: ActiveExchangeCurrencies
      end_time:
        format: date-time
        type: string
        x-go-name: EndTime
      ico_id:
        format: int64
        type: integer
        x-go-name: IcoID
      ico_issuer_pk:
        type: string
        x-go-name: IcoIssuerPK
      ico_phase_name:
        type: string
        x-go-name: IcoPhaseName
      ico_phase_status:
        type: string
        x-go-name: IcoPhaseStatus
      id:
        format: int64
        type: integer
        x-go-name: ID
      start_time:
        format: date-time
        type: string
        x-go-name: StartTime
      token_max_order_amount:
        format: int64
        type: integer
        x-go-name: TokenMaxOrderAmount
      token_min_order_amount:
        format: int64
        type: integer
        x-go-name: TokenMinOrderAmount
      tokens_left:
        format: int64
        type: integer
        x-go-name: TokensLeft
    type: object
    x-go-package: github.com/Soneso/lumenshine-backend/api/payapi
  InfoStruct:
    description: InfoStruct represents the information for the application
    properties:
      BuildDate:
        type: string
      GitRemote:
        type: string
      GitVersion:
        type: string
      MemMbUsedAlloc:
        format: uint64
        type: integer
      MemMbUsedTotalAlloc:
        format: uint64
        type: integer
      NumGoRutines:
        format: int64
        type: integer
      Version:
        type: string
    type: object
    x-go-package: github.com/Soneso/lumenshine-backend/api/payapi
  OrderGetTransactionResponse:
    description: OrderGetTransactionResponse response object
    properties:
      transaction:
        type: string
        x-go-name: Transaction
    type: object
    x-go-package: github.com/Soneso/lumenshine-backend/api/payapi
  PriceForCoinResponse:
    description: PriceForCoinResponse price for coin amount, based on the configuration
    properties:
      exchange_amount:
        type: string
        x-go-name: ExchangeAmount
      exchange_asset_code:
        type: string
        x-go-name: ExchangeAssetCode
    type: object
    x-go-package: github.com/Soneso/lumenshine-backend/api/payapi
  UserOrderResponse:
    description: UserOrderResponse represents a UserOrder
    properties:
      amount_received:
        description: This is the exchange amount received in the first transaction
        type: string
        x-go-name: AmountReceived
      exchange_amount:
        type: string
        x-go-name: ExchangeAmount
      exchange_asset_code:
        type: string
        x-go-name: ExchangeAssetCode
      exchange_currency_id:
        format: int64
        type: integer
        x-go-name: ExchangeCurrencyID
      exchange_currency_type:
        type: string
        x-go-name: ExchangeCurrencyType
      fiat_bank_name:
        type: string
        x-go-name: FiatBankName
      fiat_bic:
        type: string
        x-go-name: FiatBic
      fiat_iban:
        type: string
        x-go-name: FiatIban
      fiat_recepient_name:
        type: string
        x-go-name: FiatRecepientName
      ico_phase_id:
        format: int64
        type: integer
        x-go-name: IcoPhaseID
      id:
        format: int64
        type: integer
        x-go-name: ID
      order_status:
        type: string
        x-go-name: OrderStatus
      payment_address:
        description: This is the public key in the PaymentNetwork, where the exchange-currency
          must be transfered to
        type: string
        x-go-name: PaymentAddress
      payment_network:
        type: string
        x-go-name: PaymentNetwork
      payment_refund_tx_id:
        description: this is the refund transaction id in the PaymentNetwork
        type: string
        x-go-name: PaymentRefundTxID
      payment_usage:
        description: used for fiat and stellar payments. for stellar, this must be
          send via MEMO
        type: string
        x-go-name: PaymentUsage
      stellar_transaction_id:
        description: this is the coin payment tx in the stellar network
        type: string
        x-go-name: StellarTransactionID
      stellar_user_public_key:
        type: string
        x-go-name: StellarUserPublicKey
      token_amount:
        format: int64
        type: integer
        x-go-name: TokenAmount
    type: object
    x-go-package: github.com/Soneso/lumenshine-backend/api/payapi
host: demoapi.lumenshine.com
info:
  description: the package for payment
  termsOfService: there is not TOS right now
  title: Payment API.
  version: 0.0.1
paths:
  /create_order:
    post:
      consumes:
      - multipart/form-data
      description: CreateOrder creates a new order for the current user and returns
        the order-data for the next step
      operationId: CreateOrder
      parameters:
      - description: ID of the Ico-Phase
        format: int64
        in: query
        name: ico_phase_id
        required: true
        type: integer
        x-go-name: IcoPhaseID
      - description: Ammount of tokens orderd
        format: int64
        in: query
        name: ordered_token_amount
        required: true
        type: integer
        x-go-name: OrderedTokenAmount
      - description: ID of the Exchange currency
        format: int64
        in: query
        name: exchange_currency_id
        required: true
        type: integer
        x-go-name: ExchangeCurrencyID
      - description: Stellar Public Key of the user for the payment/coins
        in: query
        name: stellar_user_public_key
        type: string
        x-go-name: StellarUserPublicKey
      produces:
      - application/json
      responses:
        "200":
          description: CreateOrderResponse
          schema:
            $ref: '#/definitions/CreateOrderResponse'
  /execute_transaction:
    post:
      consumes:
      - multipart/form-data
      description: signs the tx with the postsigner and runs the transaction. must
        be signed with the customers seed on the client
      operationId: ExecuteTransaction
      parameters:
      - format: int64
        in: query
        name: order_id
        type: integer
        x-go-name: OrderID
      - in: query
        name: transaction
        type: string
        x-go-name: Transaction
      produces:
      - application/json
      responses:
        "200":
          description: ExecuteTransactionResponse
          schema:
            $ref: '#/definitions/ExecuteTransactionResponse'
  /fake_transaction:
    post:
      consumes:
      - multipart/form-data
      description: create a fake transaction from a payment network
      operationId: FakeTransaction
      parameters:
      - in: query
        name: payment_channel
        required: true
        type: string
        x-go-name: PaymentChannel
      - in: query
        name: tx_hash
        type: string
        x-go-name: TxHash
      - description: This is the payment-address that we genrated for the order
        in: query
        name: recipient_address
        required: true
        type: string
        x-go-name: RecipientAddress
      - description: This is the payment-address that send the payment from the external
          network
        in: query
        name: sender_address
        required: true
        type: string
        x-go-name: SenderAddress
      - format: int64
        in: query
        name: order_id
        required: true
        type: integer
        x-go-name: OrderID
      - description: This is the denomination amount in the UoM of the payment network
          that the transaction should fake
        format: int64
        in: query
        name: denomination_amount
        required: true
        type: integer
        x-go-name: DenominationAmount
      - description: This is the MEMO field for stellar payments. Must be a valid
          order ID
        in: query
        name: payment_usage
        type: string
        x-go-name: PaymentUsage
      produces:
      - application/json
      responses:
        "200":
          description: FakeTransactionResponse
          schema:
            $ref: '#/definitions/FakeTransactionResponse'
  /ico_phase_details:
    get:
      consumes:
      - multipart/form-data
      description: Returns the details of a given ICO-Phase, including all activated
        Exchange-Currencies
      operationId: IcoPhaseDetails
      parameters:
      - description: ID of the ICO-Phase
        format: int64
        in: query
        name: ico_phase_id
        required: true
        type: integer
        x-go-name: ICOPhaseID
      produces:
      - application/json
      responses:
        "200":
          description: IcoPhaseDetailsResponse
          schema:
            $ref: '#/definitions/IcoPhaseDetailsResponse'
  /ico_phase_price_for_amount:
    get:
      consumes:
      - multipart/form-data
      description: Returns the price for a given coin amount
      operationId: PriceForCoin
      parameters:
      - description: Amount of coins for the price-calculation
        format: int64
        in: query
        name: coin_amount
        required: true
        type: integer
        x-go-name: CoinAmount
      - description: ID of the Exchange currency
        format: int64
        in: query
        name: exchange_currency_id
        required: true
        type: integer
        x-go-name: ExchangeCurrencyID
      - description: ID of the ICO-Phase
        format: int64
        in: query
        name: ico_phase_id
        required: true
        type: integer
        x-go-name: ICOPhaseID
      produces:
      - application/json
      responses:
        "200":
          description: PriceForCoinResponse
          schema:
            $ref: '#/definitions/PriceForCoinResponse'
  /info:
    get:
      description: Prints some information on the binary and runtime
      operationId: InfoPage
      responses:
        "200":
          description: InfoStruct
          schema:
            $ref: '#/definitions/InfoStruct'
  /order_details:
    get:
      consumes:
      - multipart/form-data
      description: returns the unsigned payment transaction
      operationId: OrderDetails
      parameters:
      - description: ID of the Order
        format: int64
        in: query
        name: order_id
        required: true
        type: integer
        x-go-name: OrderID
      produces:
      - application/json
      responses:
        "200":
          description: OrderGetTransactionResponse
          schema:
            $ref: '#/definitions/OrderGetTransactionResponse'
  /order_list:
    get:
      consumes:
      - multipart/form-data
      description: returns the filtered list of orders for the current user
      operationId: OrderList
      parameters:
      - description: ID of the Ico-Phase
        format: int64
        in: query
        name: ico_phase_id
        type: integer
        x-go-name: IcoPhaseID
      - description: ID of the Order
        in: query
        name: order_status
        type: string
        x-go-name: OrderStatus
      produces:
      - application/json
      responses:
        "200":
          description: UserOrderResponse
          schema:
            items:
              $ref: '#/definitions/UserOrderResponse'
            type: array
schemes:
- https
securityDefinitions:
  fullAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
